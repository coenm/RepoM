//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;

namespace RepoM.ActionMenu.Core.Model.Functions
{
    partial class FileFunctions
    {
        protected sealed override void RegisterFunctions()
        {
            RegisterFunction("find_files", (Func<RepoM.ActionMenu.Interface.ActionMenuFactory.IMenuContext, Scriban.Parsing.SourceSpan, string, string, string[]>)FindFiles);
            RegisterFunction("file_exists", (Func<RepoM.ActionMenu.Interface.ActionMenuFactory.IMenuContext, string, bool>)FileExists);
            RegisterFunction("dir_exists", (Func<RepoM.ActionMenu.Interface.ActionMenuFactory.IMenuContext, string, bool>)DirectoryExists);
        }
    }
}

namespace RepoM.ActionMenu.Core.Model.Functions
{
    partial class RepositoryFunctions
    {
        protected sealed override void RegisterFunctions()
        {
            RegisterConstant("name", Name);
            RegisterConstant("path", Path);
            RegisterConstant("branch", CurrentBranch);
            RegisterConstant("branches", Branches);
            RegisterConstant("local-branches", LocalBranches);
        }
    }
}

namespace RepoM.ActionMenu.Core.Model.Functions
{
    partial class StringModule
    {
        protected sealed override void RegisterFunctions()
        {
            RegisterFunction("escape", (Func<string, string>)StringEscape);
            RegisterFunction("capitalize", (Func<string, string>)StringCapitalize);
            RegisterFunction("capitalize_words", (Func<string, string>)StringCapitalizeWords);
            RegisterFunction("downcase", (Func<string, string>)StringDowncase);
            RegisterFunction("upcase", (Func<string, string>)StringUpcase);
            RegisterFunction("endswith", (Func<string, string, bool>)StringEndsWith);
            RegisterFunction("handleize", (Func<string, string>)StringHandleize);
            RegisterFunction("lstrip", (Func<string, string>)StringLeftStrip);
            RegisterFunction("pluralize", (Func<int, string, string, string>)StringPluralize);
            RegisterFunction("rstrip", (Func<string, string>)StringRightStrip);
            RegisterFunction("split", (Func<string, string, System.Collections.IEnumerable>)StringSplit);
            RegisterFunction("startswith", (Func<string, string, bool>)StringStartsWith);
            RegisterFunction("strip", (Func<string, string>)StringStrip);
            RegisterFunction("strip_newlines", (Func<string, string>)StringStripNewlines);
            RegisterFunction("pad_left", (Func<string, int, string>)StringPadLeft);
            RegisterFunction("pad_right", (Func<string, int, string>)StringPadRight);
            RegisterFunction("regex_escape", (Func<string, string>)RegexEscape);
            RegisterFunction("regex_match", (Func<Scriban.TemplateContext, string, string, string, Scriban.Runtime.ScriptArray>)RegexMatch);
            RegisterFunction("regex_matches", (Func<Scriban.TemplateContext, string, string, string?, Scriban.Runtime.ScriptArray>)RegexMatches);
            RegisterFunction("regex_replace", (Func<Scriban.TemplateContext, string, string, string, string, string>)RegexReplace);
            RegisterFunction("regex_split", (Func<Scriban.TemplateContext, string, string, string, Scriban.Runtime.ScriptArray>)RegexSplit);
            RegisterFunction("regex_unescape", (Func<string, string>)RegexUnescape);
        }
    }
}
