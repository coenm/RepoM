context: 
- type   : evaluate-script@1
  content: |-
    func is_null(input)
      ret input == null
    end

    func is_not_null(input)
      ret input != null
    end

    func get_filename(path)
      ret path | string.split("\\") | array.last
    end

    func remotes_contain_inner(remotes, url_part)
      urls     = remotes | array.map "url"
      filtered = array.filter(urls, do 
        ret string.contains($0, url_part) 
      end)
      ret array.size(filtered) > 0;
    end

    func remotes_contain(url_part)
      ret remotes_contain_inner(repository.remotes, url_part)
    end

    func get_remote_origin()
      remotes  = repository.remotes;
      filtered = array.filter(remotes, do 
            remote      = $0;
        ret remote.key == "origin"
      end)
      ret array.first(filtered);
    end

    func get_remote_origin_name()
      remote = get_remote_origin();
      ret remote?.name;
    end

    func repository_path_contains(path)
      ret repository.linux_path | string.contains path
    end

    func is_feature_branch()
      ret repository.branch | string.starts_with "feature/"
    end

    func sanitize_feature_branch_name()
      ret repository.branch | string.replace "feature/" "" | string.strip
    end

    func try_get_remote_repo_long_name(long_url)
      splitString = long_url | string.strip | string.split "/";
      if array.size(splitString) < 2
        ret long_url
      end
      name = array.last(splitString) | string.replace ".git" ""
      author = splitString[^2]
      ret author + "/" + name
    end

    func try_get_remote_origin_long_name()
      if is_null(repository.remotes) || array.size(repository.remotes) == 0
        ret repository.name
      end
      ret try_get_remote_repo_long_name(repository.remotes[0].url) 
    end

    remote_name_origin   = get_remote_origin_name();
    is_work_repository   = remotes_contain("My-Work");
    is_github_repository = remotes_contain("github.com");

    solution_files = file.find_files(repository.linux_path, "*.sln");
    solution_file  = array.first(solution_files);
    
    dir_visual_studio               = env.ProgramW6432 + "/Microsoft Visual Studio/";
    dir_windows_terminal_Store      = env.LocalAppData + "/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/";
    dir_windows_terminal_Preview    = env.LocalAppData + "/Packages/Microsoft.WindowsTerminalPreview_8wekyb3d8bbwe/";
    dir_windows_terminal_Unpackaged = env.LocalAppData + "/Packages/Microsoft/WindowsTerminal/";

    exe_vs_code            = env.LocalAppData + "/Programs/Microsoft VS Code/code.exe";
    exe_sourcetree         = env.LocalAppData + "/SourceTree/SourceTree.exe";
    exe_gitkraken          = env.LocalAppData + "/GitKraken/GitKraken.exe";
    exe_everything         = env.ProgramW6432 + "/Everything/Everything.exe";
    exe_terminal_commander = env.ProgramW6432 + "/totalcmd/TOTALCMD64.EXE";

    
# Specific var files
- type          : render-variable@1
  name          : repo_docs_directory
  value         : 'G:\\My Drive\\RepoDocs\\github.com\\{{ remote_name_origin }}'
  enabled       : is_github_repository

# Env files
- type          : render-variable@1
  name          : repo_environment_file_directory
  value         : '{{ env.REPOZ_CONFIG_PATH }}\{{ remote_name_origin }}'

- type          : render-variable@1
  name          : repo_environment_file
  value         : '{{ env.REPOZ_CONFIG_PATH }}\{{ remote_name_origin }}\RepoM.env'

- type          : render-variable@1
  name          : repo_yaml_file
  value         : 'C:\\WorkCofigs\{{ remote_name_origin }}\RepoMV2.yaml'

# Runsettings
- type          : load-file@1
  filename      : '{{ repo_environment_file }}'
  enabled       : is_work_repository

- type          : load-file@1
  filename      : '{{ env.REPOZ_CONFIG_PATH }}\work.env'
  enabled       : is_work_repository

- type          : load-file@1
  filename      : '{{ repo_yaml_file }}'
  enabled       : is_work_repository

action-menu     : 

- type          : command@1
  name          : 📂 Open in Windows File Explorer
  command       : '"{{ repository.path }}"'

# Open in visual studio when exactly one '.sln' file was found: 
- type          : command@1
  name          : 🗃️ Open in Visual Studio
  command       : '{{ solution_file }}'
  active        : array.size(solution_files) == 1 && file.dir_exists(dir_visual_studio)

# Otherwise,  Visual studio folder with all '.sln' files when multiple sln files were found: 
- type          : folder@1
  name          : 🗃️ Open in Visual Studio
  active        : array.size(solution_files) > 1 && file.dir_exists(dir_visual_studio)
  actions       : 
  - type        : foreach@1
    enumerable  : solution_files
    variable    : sln
    actions     : 
    - type      : command@1
      name      : '{{ get_filename(sln) }}'
      command   : '{{ sln }}'
  
- type          : command@1
  name          : 📝 Open in Visual Studio Code
  command       : code
  arguments     : '"{{ repository.path }}"'
  active        : file.file_exists(exe_vs_code)

- type          : executable@1
  name          : Open in Sourcetree
  executable    : '{{ exe_sourcetree }}'
  arguments     : -f "{{ repository.windows_path }}"
  active        : file.file_exists(exe_sourcetree)

- type          : executable@1
  name          : 📊 Open in GitKraken 🦑
  executable    : '{{ exe_gitkraken }}'
  arguments     : --path "{{ repository.path }}"

- type          : command@1
  name          : 🧾 Open in Windows Terminal
  command       : wt
  arguments     : -d "{{ repository.path }}"
  active        : file.dir_exists(dir_windows_terminal_Store) || file.dir_exists(dir_windows_terminal_Preview) || file.dir_exists(dir_windows_terminal_Unpackaged)

- type          : executable@1
  name          : 🔍 Open in Everything
  executable    : '{{ exe_everything }}'
  arguments     : -s """"{{ repository.path }}""" "
  active        : file.file_exists(exe_everything)

- type          : executable@1
  name          : Open in TotalCommander
  executable    : '{{ exe_terminal_commander }}'
  arguments     : /O /T /L="{{ repository.linux_path }}"
  active        : file.file_exists(exe_terminal_commander)

# - type        : executable@1
# name          : 'Open in Windows PowerShell'
# executable    : '{{ env.WINDIR }}/System32/WindowsPowerShell/v1.0/powershell.exe'
# arguments     : -executionpolicy bypass -noexit -command "Set-Location '{{ repository.linux_path }}'"

# - type        : executable@1
# name          : 'Open in Windows Command Prompt'
# executable    : '{{ env.WINDIR }}/System32/cmd.exe'
# arguments     : /k cd "{{ repository.linux_path }}"

- type          : separator@1

- type          : just-text@1
  name          : 'Warning: No remote repos to browse to'
  active        : array.size(repository.remotes) == 0

# #single remote, create url menu item
# - type          : url@1
#   name          : '🔗 {{ try_get_remote_origin_long_name() }}'
#   url           : '{{ repository.remotes[0].url }}'
#   active        : array.size(repository.remotes) == 1

# #Multiple remotes, create folder with multiple menu items
# - type          : folder@1
#   name          : 🔗 Remote repos
#   active        : array.size(repository.remotes) > 1
#   actions       : 
#   - type        : foreach@1
#     enumerable  : repository.remotes
#     variable    : remote
#     actions     : 
#     - type      : url@1
#       name      : '{{ try_get_remote_repo_long_name(remote.url) }} [{{ remote.key }}] '
#       url       : '{{ remote.url }}'

- type          : browse-repository@1
- type          : folder@1
  name          : 📦 Git
  actions       : 
  - type        : git-fetch@1
  - type        : git-pull@1
  - type        : git-push@1
  - type        : git-checkout@1

- type          : separator@1
  # active: is_work_repository

- type          : pin-repository@1
  name          : "📌 Pin / Unpin Repo"
  mode          : toggle

- type          : folder@1
  name          : ❓ About {{try_get_remote_origin_long_name()}}
  actions       : 
  
  - type        : clipboard-copy@1
    name        : 'Current branch is {{ repository.branch }}'
    text        : '{{ repository.branch }}'

  - type        : clipboard-copy@1
    name        : 'Local path is {{ repository.windows_path }}'
    text        : '{{ repository.windows_path }}'

  - type        : separator@1

  - type        : ignore-repository@1
    name        : ❌ Ignore Repository
    
  # context     : 
  # - type      : render-variable@1
  #   name      : repo_docs_directory
  #   value     : 'C:\docs\{{ repository.name }}\' 

  # - type      : command@1
  # name        : 'Create Directory {{ repo_docs_directory }}'
  # command     : cmd
  # arguments   : /k mkdir "{{ repo_docs_directory }}"
  # active      : '!file.dir_exists(repo_docs_directory)'
