//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
{{~ func GenerateDocDescriptor(item) ~}}
            {
                var descriptor = {{ if item.IsModule }}Descriptor{{ else }}Descriptors["{{ item.Name }}"]{{ end }};
                descriptor.Category = "{{ item.Category }}";
                descriptor.Description = @"{{ item.Description | string.replace '"' '""' }}";
                descriptor.IsCommand = {{ item.IsCommand }};
            {{~ for param in item.Params ~}}
                descriptor.Params.Add(new KalkParamDescriptor("{{ param.Name }}", @"{{ param.Description | string.replace '"' '""' }}")  { IsOptional = {{ param.IsOptional }} });
            {{~ end ~}}
                {{~ if item.Returns ~}}
                descriptor.Returns = @"{{ item.Returns | string.replace '"' '""' }}";
                {{~ end ~}}
                {{~ if item.Remarks ~}}
                descriptor.Remarks = @"{{ item.Remarks | string.replace '"' '""' }}";
                {{~ end ~}}
                {{~ if item.Example ~}}
                descriptor.Example = @"{{ item.Example | string.replace '"' '""' }}";
                {{~ end ~}}
            }
{{~ end ~}}
{{~ for module in modules ~}}

namespace {{ module.Namespace }}
{
    partial class {{ module.ClassName }}
    {
    {{~ if module.Name != 'All' ~}}
        {{~ if string.contains module.Namespace 'Plugin' ~}}
        public override void RegisterFunctions(RepoM.ActionMenu.Interface.Scriban.IContextRegistration contextRegistration)
        {{~ else if module.ClassName == 'KalkEngine' ~}}
        protected void RegisterFunctions()
        {{~ else ~}}
        protected sealed override void RegisterFunctions()
        {{~ end ~}}
        {
        {{~ if string.contains module.Namespace 'Plugin' ~}}
            contextRegistration = contextRegistration.CreateOrGetSubRegistration("{{ module.Name }}");
            {{~ for member in module.Members ~}}
                {{~ if member.IsConst ~}}
            contextRegistration.RegisterConstant("{{ member.Name }}", {{ member.CSharpName }});
                {{~ else if member.IsFunc ~}}
            contextRegistration.RegisterFunction("{{ member.Name }}", {{member.Cast}}{{ member.CSharpName }});
                {{~ else if member.IsAction ~}}
            contextRegistration.RegisterAction("{{ member.Name }}", {{member.Cast}}{{ member.CSharpName }});
                {{~ end ~}}
            {{~ end ~}}
        {{~ else ~}}
            {{~ for member in module.Members ~}}
                {{~ if member.IsConst ~}}
            RegisterConstant("{{ member.Name }}", {{ member.CSharpName }});
                {{~ else if member.IsFunc ~}}
            RegisterFunction("{{ member.Name }}", {{member.Cast}}{{ member.CSharpName }});
                {{~ else if member.IsAction ~}}
            RegisterAction("{{ member.Name }}", {{member.Cast}}{{ member.CSharpName }});
                {{~ end ~}}
            {{~ end ~}}
        {{~ end ~}}
        }
    {{~ end ~}}
    }
}
{{~ end ~}}
